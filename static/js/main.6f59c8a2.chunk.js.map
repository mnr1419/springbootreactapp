{"version":3,"sources":["service/ApiService.jsx","components/EmployeeList.jsx","actions/employeeactions.jsx","actions/actiontypes.jsx","components/AddEmployee.jsx","components/EditEmloyee.jsx","App.js","serviceWorker.js","reducers/employeeReducer.jsx","index.js"],"names":["axios","get","EmployeeList","this","props","getEmployees","border","employees","map","emp","index","key","empId","empName","salary","empAddress","Component","connect","state","dispatch","a","ApiService","getAllEmployees","res","type","data","AddEmployee","onSubmit","handleSubmit","name","placeholder","value","onChange","changeInput","EditEmployee","App","className","to","path","exact","component","Boolean","window","location","hostname","match","initialState","employee","EmployeeReducer","action","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oWAQe,M,0GAHX,OAAOA,IAAMC,IAJS,sD,MCGpBC,E,kLAOFC,KAAKC,MAAMC,iB,+BAGX,OACE,6BACE,gDACA,6BACA,6BACA,2BAAOC,OAAO,KACZ,+BACE,4BACE,kCACA,oCACA,sCACA,uCACA,wCAGJ,+BACGH,KAAKC,MAAMG,UAAUC,KAAI,SAACC,EAAKC,GAAN,OACxB,wBAAIC,IAAKD,GACP,4BAAKD,EAAIG,OACT,4BAAKH,EAAII,SACT,4BAAKJ,EAAIK,QACT,4BAAKL,EAAIM,YACT,sD,GAhCWC,aA+CZC,eAHS,SAACC,GAAD,MAAY,CAClCX,UAAWW,EAAMX,aAEqB,CAAEF,aC3Cd,yDAAM,WAAOc,GAAP,eAAAC,EAAA,sEACdC,EAAWC,kBADG,OAC1BC,EAD0B,OAEhCJ,EAAS,CACPK,KCX6B,oBDY7BjB,UAAWgB,EAAIE,OAJe,2CAAN,wDD2CbR,CAA2Cf,GGA3CwB,E,kDAhDb,WAAYtB,GAAQ,IAAD,8BACjB,cAAMA,IACDc,MAAQ,CACXL,QAAS,GACTC,OAAQ,GACRC,WAAY,IALG,E,qDASjB,OACE,6BACE,4CACA,6BACA,6BACA,0BAAMY,SAAUxB,KAAKyB,cACnB,+CACA,2BACEJ,KAAK,OACLK,KAAK,UACLC,YAAY,gBACZC,MAAO5B,KAAKe,MAAML,QAClBmB,SAAU7B,KAAK8B,cAEjB,6BACA,6BACA,iDACA,2BACET,KAAK,SACLK,KAAK,SACLC,YAAY,kBACZC,MAAO5B,KAAKe,MAAMJ,OAClBkB,SAAU7B,KAAK8B,cAEjB,6BACA,6BACA,kDACA,2BACET,KAAK,WACLK,KAAK,aACLC,YAAY,mBACZC,MAAO5B,KAAKe,MAAMH,WAClBiB,SAAU7B,KAAK8B,oB,GA1CDjB,aCKXkB,E,uKAHX,OAAO,kD,GAFgBlB,aCyBZmB,MAnBf,WACE,OACE,kBAAC,IAAD,KACE,yBAAKC,UAAU,OACb,wBAAIA,UAAU,uBAAd,+BACA,6BACA,6BACA,kBAAC,IAAD,CAAMC,GAAG,cAAT,QAJF,IAIoC,kBAAC,IAAD,CAAMA,GAAG,gBAAT,OAClC,6BACA,6BACA,kBAAC,IAAD,CAAOC,KAAK,aAAaC,OAAK,EAACC,UAAWtC,IAC1C,kBAAC,IAAD,CAAOoC,KAAK,IAAIC,OAAK,EAACC,UAAWtC,IACjC,kBAAC,IAAD,CAAOoC,KAAK,eAAeC,OAAK,EAACC,UAAWd,IAC5C,kBAAC,IAAD,CAAOY,KAAK,eAAeC,OAAK,EAACC,UAAWN,OCThCO,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,oBCbAC,EAAe,CACnBvC,UAAW,GACXwC,SAAU,IAeGC,EAZS,WAAmC,IAAlC9B,EAAiC,uDAAzB4B,EAAcG,EAAW,uCACxD,OAAQA,EAAOzB,MACb,ILZ6B,oBKa3B,OAAO,eACFN,EADL,CAEEX,UAAW0C,EAAO1C,YAEtB,QACE,OAAOW,I,QCAPgC,EAAQC,YAAYH,EAAiBI,YAAgBC,MAC3DC,IAASC,OACP,kBAAC,IAAD,CAAUL,MAAOA,GACf,kBAAC,EAAD,OAEFM,SAASC,eAAe,SF4GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.6f59c8a2.chunk.js","sourcesContent":["import axios from \"axios\";\r\nconst USER_API_BASE_URL = \"http://localhost:2222/spring-boot-app/employee\";\r\n\r\nclass ApiService {\r\n  getAllEmployees() {\r\n    return axios.get(USER_API_BASE_URL);\r\n  }\r\n}\r\nexport default new ApiService();\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport PropTypes from \"prop-types\";\r\nimport { getEmployees } from \"../actions/employeeactions\";\r\nclass EmployeeList extends Component {\r\n  // constructor(props) {\r\n  //   super(props);\r\n  //   //this.deleteProduct = this.deleteProduct.bind(this);\r\n  //   //this.editProduct = this.editProduct.bind(this);\r\n  // }\r\n  componentDidMount() {\r\n    this.props.getEmployees();\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Employee Detials</h3>\r\n        <br />\r\n        <br />\r\n        <table border=\"2\">\r\n          <thead>\r\n            <tr>\r\n              <th>Id</th>\r\n              <th>Name</th>\r\n              <th>Salary</th>\r\n              <th>Address</th>\r\n              <th>Action</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>\r\n            {this.props.employees.map((emp, index) => (\r\n              <tr key={index}>\r\n                <td>{emp.empId}</td>\r\n                <td>{emp.empName}</td>\r\n                <td>{emp.salary}</td>\r\n                <td>{emp.empAddress}</td>\r\n                <td>Edit|Delete</td>\r\n              </tr>\r\n            ))}\r\n          </tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nEmployeeList.propTypes = {\r\n  getEmployees: PropTypes.func.isRequired,\r\n};\r\nconst mapStateToProps = (state) => ({\r\n  employees: state.employees,\r\n});\r\nexport default connect(mapStateToProps, { getEmployees })(EmployeeList);\r\n","import axios from \"axios\";\r\nimport {\r\n  GET_ALL_EMPLOYEES,\r\n  UPDATE_EMPLOYEE,\r\n  ADD_EMPLOYEE,\r\n} from \"./actiontypes\";\r\nimport ApiService from \"../service/ApiService\";\r\n\r\nexport const getEmployees = () => async (dispatch) => {\r\n  const res = await ApiService.getAllEmployees();\r\n  dispatch({\r\n    type: GET_ALL_EMPLOYEES,\r\n    employees: res.data,\r\n  });\r\n};\r\n","export const GET_ALL_EMPLOYEES = \"GET_ALL_EMPLOYEES\";\r\nexport const UPDATE_EMPLOYEE = \"UPDATE_EMPLOYEE\";\r\nexport const ADD_EMPLOYEE = \"ADD_EMPLOYEE\";\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nclass AddEmployee extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      empName: \"\",\r\n      salary: \"\",\r\n      empAddress: \"\",\r\n    };\r\n  }\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h3>Add Employee</h3>\r\n        <br />\r\n        <br />\r\n        <form onSubmit={this.handleSubmit}>\r\n          <label> Enter Name:</label>\r\n          <input\r\n            type=\"text\"\r\n            name=\"empName\"\r\n            placeholder=\"Employee Name\"\r\n            value={this.state.empName}\r\n            onChange={this.changeInput}\r\n          />\r\n          <br />\r\n          <br />\r\n          <label> Enter Salary:</label>\r\n          <input\r\n            type=\"Number\"\r\n            name=\"salary\"\r\n            placeholder=\"Employee Salary\"\r\n            value={this.state.salary}\r\n            onChange={this.changeInput}\r\n          />\r\n          <br />\r\n          <br />\r\n          <label> Enter Address:</label>\r\n          <input\r\n            type=\"textarea\"\r\n            name=\"empAddress\"\r\n            placeholder=\"Employee Address\"\r\n            value={this.state.empAddress}\r\n            onChange={this.changeInput}\r\n          />\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default AddEmployee;\r\n","import React, { Component } from \"react\";\r\nimport { connect } from \"react-redux\";\r\nclass EditEmployee extends Component {\r\n  render() {\r\n    return <div>Edit Employee</div>;\r\n  }\r\n}\r\nexport default EditEmployee;\r\n","import React from \"react\";\nimport \"./App.css\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport { BrowserRouter, Route, Link } from \"react-router-dom\";\nimport EmployeeList from \"./components/EmployeeList\";\nimport AddEmployee from \"./components/AddEmployee\";\nimport EditEmployee from \"./components/EditEmloyee\";\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <div className=\"App\">\n        <h3 className=\"alert alert-warning\"> Spring boot and Redux app </h3>\n        <br />\n        <br />\n        <Link to=\"/employees\">Home</Link>|<Link to=\"/addemployee\">Add</Link>\n        <br />\n        <br />\n        <Route path=\"/employees\" exact component={EmployeeList} />\n        <Route path=\"/\" exact component={EmployeeList} />\n        <Route path=\"/addemployee\" exact component={AddEmployee} />\n        <Route path=\"/ediemployee\" exact component={EditEmployee} />\n      </div>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import {\r\n  GET_ALL_EMPLOYEES,\r\n  ADD_EMPLOYEE,\r\n  UPDATE_EMPLOYEE,\r\n} from \"../actions/actiontypes\";\r\nconst initialState = {\r\n  employees: [],\r\n  employee: {},\r\n};\r\n\r\nconst EmployeeReducer = (state = initialState, action) => {\r\n  switch (action.type) {\r\n    case GET_ALL_EMPLOYEES:\r\n      return {\r\n        ...state,\r\n        employees: action.employees,\r\n      };\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default EmployeeReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\n//import { createStore, applyMiddleware, compose } from \"redux\";\nimport { createStore, applyMiddleware } from \"redux\";\nimport EmployeeReducer from \"../src/reducers/employeeReducer\";\nimport thunk from \"redux-thunk\";\n//import logger from \"redux-logger\";\n// const ReactReduxDevTools =\n//   window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__();\n// const middleware = [thunk];\n// const store = createStore(\n//   EmployeeReducer,\n//   compose(applyMiddleware(...middleware, logger, ReactReduxDevTools))\n// );\nconst store = createStore(EmployeeReducer, applyMiddleware(thunk));\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}